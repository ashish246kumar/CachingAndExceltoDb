package com.caching.caching.service.impl;

import java.util.List;
import java.io.File;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import com.caching.caching.entity.Invoice;
import com.caching.caching.repository.InvoiceRepository;
import com.caching.caching.service.IExcelDataService;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.usermodel.Sheet;
import java.io.IOException;
import java.util.*;

public class ExcelDataServiceImpl implements IExcelDataService{

	@Autowired
	InvoiceRepository repo;
	Workbook workbook;
	
	@Value("${app.upload.file:${user.home}}")
	public String EXCEL_FILE_PATH;
	
	@Override
	public List<Invoice> getExcelDataAsList() {
		
		List<String>list=new ArrayList<>();
		
		DataFormatter dataFormatter = new DataFormatter();
		try {
			workbook = WorkbookFactory.create(new File(EXCEL_FILE_PATH));
		}
		catch(EncryptedDocumentException | IOException e) {
			e.printStackTrace();
		}
		// Retrieving the number of sheets in the Workbook
		System.out.println("-------Workbook has '" + workbook.getNumberOfSheets() + "' Sheets-----");
		// Getting the Sheet at index zero
		Sheet sheet = workbook.getSheetAt(0);
		int noOfColumns = sheet.getRow(0).getLastCellNum();
		System.out.println("-------Sheet has '"+noOfColumns+"' columns------");
		
		for (Row row : sheet) {
			for (Cell cell : row) {
				String cellValue = dataFormatter.formatCellValue(cell);
				list.add(cellValue);
			}
		}
		// filling excel data and creating list as List<Invoice>
				List<Invoice> invList = createList(list, noOfColumns);

				// Closing the workbook
				try {
					workbook.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				return invList;
	}
	private List<Invoice> createList(List<String> excelData, int noOfColumns) {
		
		ArrayList<Invoice> invList = new ArrayList<Invoice>();
		int i = noOfColumns;
		do {
			Invoice inv = new Invoice();

			inv.setName(excelData.get(i));
			inv.setAmount(Double.valueOf(excelData.get(i + 1)));
			inv.setNumber(excelData.get(i + 2));
			inv.setReceivedDate(excelData.get(i + 3));

			invList.add(inv);
			i = i + (noOfColumns);

		} while (i < excelData.size());
		return invList;
		
	}

	@Override
	public int saveExcelData(List<Invoice> invoices) {
		invoices = repo.saveAll(invoices);
		return invoices.size();
	}

}
